// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SERIALIZE_H_
#define FLATBUFFERS_GENERATED_SERIALIZE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

struct Pos;
struct PosBuilder;

struct Pos FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PosBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGE = 4,
    VT_X = 6,
    VT_Y = 8
  };
  const ::flatbuffers::String *message() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGE);
  }
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           VerifyField<float>(verifier, VT_X, 4) &&
           VerifyField<float>(verifier, VT_Y, 4) &&
           verifier.EndTable();
  }
};

struct PosBuilder {
  typedef Pos Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_message(::flatbuffers::Offset<::flatbuffers::String> message) {
    fbb_.AddOffset(Pos::VT_MESSAGE, message);
  }
  void add_x(float x) {
    fbb_.AddElement<float>(Pos::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(Pos::VT_Y, y, 0.0f);
  }
  explicit PosBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Pos> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Pos>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Pos> CreatePos(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> message = 0,
    float x = 0.0f,
    float y = 0.0f) {
  PosBuilder builder_(_fbb);
  builder_.add_y(y);
  builder_.add_x(x);
  builder_.add_message(message);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Pos> CreatePosDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *message = nullptr,
    float x = 0.0f,
    float y = 0.0f) {
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return CreatePos(
      _fbb,
      message__,
      x,
      y);
}

inline const Pos *GetPos(const void *buf) {
  return ::flatbuffers::GetRoot<Pos>(buf);
}

inline const Pos *GetSizePrefixedPos(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Pos>(buf);
}

inline bool VerifyPosBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Pos>(nullptr);
}

inline bool VerifySizePrefixedPosBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Pos>(nullptr);
}

inline void FinishPosBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Pos> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPosBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Pos> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_SERIALIZE_H_
